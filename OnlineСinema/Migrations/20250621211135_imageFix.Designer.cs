// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineСinema.Database;

#nullable disable

namespace OnlineСinema.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20250621211135_imageFix")]
    partial class imageFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineСinema.Models.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Orderindex")
                        .HasColumnType("integer")
                        .HasColumnName("orderindex");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("Seasoneid")
                        .HasColumnType("uuid")
                        .HasColumnName("seasoneid");

                    b.HasKey("Id")
                        .HasName("episode_pkey");

                    b.HasIndex("Seasoneid");

                    b.ToTable("episode");
                });

            modelBuilder.Entity("OnlineСinema.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<bool>("IsCover")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cover");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("fileExtention")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_extention");

                    b.HasKey("Id")
                        .HasName("image_pkey");

                    b.ToTable("image");
                });

            modelBuilder.Entity("OnlineСinema.Models.Seasone", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Orderindex")
                        .HasColumnType("integer")
                        .HasColumnName("orderindex");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("Titleid")
                        .HasColumnType("uuid")
                        .HasColumnName("titleid");

                    b.HasKey("Id")
                        .HasName("seasone_pkey");

                    b.HasIndex("Titleid");

                    b.ToTable("seasone");
                });

            modelBuilder.Entity("OnlineСinema.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("tags_pkey");

                    b.HasIndex(new[] { "Name" }, "tags_name_key")
                        .IsUnique();

                    b.ToTable("tags");
                });

            modelBuilder.Entity("OnlineСinema.Models.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("Coverimageid")
                        .HasColumnType("uuid")
                        .HasColumnName("coverimageid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Isfilm")
                        .HasColumnType("boolean")
                        .HasColumnName("isfilm");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid?>("Tileimageid")
                        .HasColumnType("uuid")
                        .HasColumnName("tileimageid");

                    b.HasKey("Id")
                        .HasName("title_pkey");

                    b.HasIndex("Coverimageid");

                    b.HasIndex("Tileimageid");

                    b.HasIndex(new[] { "Name" }, "title_name_key")
                        .IsUnique();

                    b.ToTable("title");
                });

            modelBuilder.Entity("OnlineСinema.Models.UserSeen", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("Episodeid")
                        .HasColumnType("uuid")
                        .HasColumnName("episodeid");

                    b.Property<Guid?>("Titleid")
                        .HasColumnType("uuid")
                        .HasColumnName("titleid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("user_seen_pkey");

                    b.HasIndex("Episodeid");

                    b.HasIndex("Titleid");

                    b.HasIndex("UserId");

                    b.ToTable("user_seen");
                });

            modelBuilder.Entity("TagTitle", b =>
                {
                    b.Property<Guid>("Tagsid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Titleid")
                        .HasColumnType("uuid");

                    b.HasKey("Tagsid", "Titleid");

                    b.ToTable("TagTitle");
                });

            modelBuilder.Entity("TagsTitle", b =>
                {
                    b.Property<Guid>("Tagsid")
                        .HasColumnType("uuid")
                        .HasColumnName("tagsid");

                    b.Property<Guid>("Titleid")
                        .HasColumnType("uuid")
                        .HasColumnName("titleid");

                    b.HasKey("Tagsid", "Titleid")
                        .HasName("tags_title_pkey");

                    b.HasIndex("Titleid");

                    b.ToTable("tags_title", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineСinema.Models.Episode", b =>
                {
                    b.HasOne("OnlineСinema.Models.Seasone", "Seasone")
                        .WithMany("Episodes")
                        .HasForeignKey("Seasoneid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkepisode624417");

                    b.Navigation("Seasone");
                });

            modelBuilder.Entity("OnlineСinema.Models.Seasone", b =>
                {
                    b.HasOne("OnlineСinema.Models.Title", "Title")
                        .WithMany("Seasones")
                        .HasForeignKey("Titleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkseasone718967");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("OnlineСinema.Models.Title", b =>
                {
                    b.HasOne("OnlineСinema.Models.Image", "Coverimage")
                        .WithMany("TitleCoverimages")
                        .HasForeignKey("Coverimageid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fktitle479355");

                    b.HasOne("OnlineСinema.Models.Image", "Tileimage")
                        .WithMany("TitleTileimages")
                        .HasForeignKey("Tileimageid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fktitle660657");

                    b.Navigation("Coverimage");

                    b.Navigation("Tileimage");
                });

            modelBuilder.Entity("OnlineСinema.Models.UserSeen", b =>
                {
                    b.HasOne("OnlineСinema.Models.Episode", "Episode")
                        .WithMany("UserSeens")
                        .HasForeignKey("Episodeid")
                        .HasConstraintName("fkuserseen149973");

                    b.HasOne("OnlineСinema.Models.Title", "Title")
                        .WithMany("UserSeens")
                        .HasForeignKey("Titleid")
                        .HasConstraintName("fkuserseen355288");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Episode");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TagsTitle", b =>
                {
                    b.HasOne("OnlineСinema.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("Tagsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fktags_title691523");

                    b.HasOne("OnlineСinema.Models.Title", null)
                        .WithMany()
                        .HasForeignKey("Titleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fktags_title298316");
                });

            modelBuilder.Entity("OnlineСinema.Models.Episode", b =>
                {
                    b.Navigation("UserSeens");
                });

            modelBuilder.Entity("OnlineСinema.Models.Image", b =>
                {
                    b.Navigation("TitleCoverimages");

                    b.Navigation("TitleTileimages");
                });

            modelBuilder.Entity("OnlineСinema.Models.Seasone", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("OnlineСinema.Models.Title", b =>
                {
                    b.Navigation("Seasones");

                    b.Navigation("UserSeens");
                });
#pragma warning restore 612, 618
        }
    }
}
